/-
Lemma 10.16.10. Let R be a ring. The space Spec(R) is quasi-compact.

Proof. It suffices to prove that any covering of Spec(R) by standard opens can be refined by a finite covering. Thus suppose that Spec(R)=∪D(fi) for a set of elements {fi}i∈I of R. This means that ∩V(fi)=∅. According to Lemma 10.16.2 (00E0) this means that V({fi})=∅. According to the same lemma this means that the ideal generated by the fi is the unit ideal of R. This means that we can write 1 as a finite sum: 1=∑i∈Jrifi with J⊂I finite. And then it follows that Spec(R)=∪i∈JD(fi). 
-/

import Kenny_comm_alg.Zariski algebra.module Kenny_comm_alg.maximal_ideal
universe u

local attribute [instance] classical.prop_decidable
set_option pp.proofs true
lemma lemma_quasi_compact {R : Type u} [comm_ring R] : compact (@set.univ (X R)) :=
begin
  rw compact_iff_finite_subcover,
  intros c h1 h2,
  let S := generate (⋃₀{E : set R | ∃ (A : set (X R)) (H : A ∈ set.compl ⁻¹' c), Spec.V E = A}),
  have h3 := set.ext (Zariski._match_3 R (set.compl ⁻¹' c) (λ x hx, begin cases h1 (-x) hx with w h, existsi w, simpa using h, end)),
  replace h2 := set.eq_univ_of_univ_subset h2,
  have h4 : ⋂₀(set.compl ⁻¹' c) = -⋃₀ c,
  { rw set.compl_sUnion,
    apply congr_arg,
    apply set.ext,
    intro z,
    split,
    { intro hz,
      existsi -z,
      existsi hz,
      exact set.compl_compl z },
    { intro hz,
      cases hz with z1 hz1,
      cases hz1 with hz1 hz2,
      rw ← hz2,
      apply set.mem_of_eq_of_mem _ hz1,
      exact set.compl_compl z1 } },
  rw h4 at h3,
  rw h2 at h3,
  rw set.compl_univ at h3,
  rw V_set_eq_V_generate at h3,
  have h5 : S = set.univ,
  { apply classical.by_contradiction,
    intro h6,
    have h7 : is_proper_ideal S,
    from { ne_univ := h6 },
    have h8 := @@is_ideal.find_maximal_ideal.is_maximal_ideal _ S h7,
    have h9 := @is_ideal.find_maximal_ideal.contains _ _ S h7,
    rw set.eq_empty_iff_forall_not_mem at h3,
    specialize h3 ⟨@@is_ideal.find_maximal_ideal _ S h7, h8.to_is_prime_ideal⟩,
    exact h3 h9 },
  rw set.eq_univ_iff_forall at h5,
  specialize h5 1 (span (⋃₀{E : set R | ∃ (A : set (X R)) (H : A ∈ set.compl ⁻¹' c), Spec.V E = A})) subset_span,
  rcases h5 with ⟨v, hv1, hv2⟩,
  cases v with v hv3,
  cases hv3,
  cases hv3 with hv4 hv5,
  let T := finset.image (λ z:{a : R | v a ≠ 0}, set.compl $ classical.some (classical.some (classical.some_spec (classical.by_contradiction (mt (hv1 z.1) z.2))))) hv4,
  existsi {x | x ∈ T},
  split,
  { intros z hz,
    dsimp [T] at hz,
    rw finset.mem_image at hz,
    rcases hz with ⟨z1, hz1, hz2⟩,
    cases z1 with z1 hz3,
    dsimp at hz2,
    cases classical.some_spec (classical.some (classical.some_spec (classical.by_contradiction (mt (hv1 z1) hz3)))) with hz4 hz5,
    rw ← hz2,
    exact hz4 },
  split,
  { constructor,
    apply fintype.subtype T,
    simp },
  { admit } -- I might have screwed up here
end
#print lc