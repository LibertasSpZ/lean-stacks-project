/-
Lemma 10.16.6. Let R be a ring. Let f‚ààR. The map R‚ÜíRf induces via the functoriality of Spec a homeomorphism
Spec(Rf)‚ü∂D(f)‚äÇSpec(R).
The inverse is given by ùî≠‚Ü¶ùî≠‚ãÖRf.

Proof. This is a special case of Lemma 10.16.5 (=tag 00E3)
-/

import analysis.topology.topological_space analysis.topology.continuity tag00E2 localization
import Kenny_comm_alg.Zariski

#check Zariski.induced 

/-- tag 00E4 -/

def topological_space.open_immersion {X Y : Type} [tX : topological_space X] [tY : topological_space Y] (œÜ : X ‚Üí Y) := 
  continuous œÜ ‚àß 
  function.injective œÜ ‚àß 
  ‚àÄ U : set X, tX.is_open U ‚Üí tY.is_open (set.image œÜ U)

lemma lemma_standard_open (R : Type) [comm_ring R] (f : R) : 
  let œÜ := Zariski.induced $ localization.of_comm_ring R (powers f) in
  topological_space.open_immersion œÜ ‚àß œÜ '' set.univ = Spec.D'(f) :=
‚ü®‚ü®Zariski.induced.continuous _,
  Œª x y hxy, subtype.eq $ set.ext $ Œª z,
    quotient.induction_on z $ Œª ‚ü®r, s, hs‚ü©,
    ‚ü®Œª hr, have h1 : _ := localization.mul_denom R _ r s hs,
       have h2 : localization.of_comm_ring R (powers f) r ‚àà x.val,
         from eq.rec (@@is_ideal.mul_right _ x.2.1.1 hr) h1,
       have h3 : r ‚àà (Zariski.induced (localization.of_comm_ring R (powers f)) y).1,
         from eq.rec h2 hxy,
       have h4 : localization.of_comm_ring R (powers f) r ‚àà y.val,
         from h3,
       have h5 : _ := localization.mul_inv_denom R _ r s hs,
       eq.rec (@@is_ideal.mul_right _ y.2.1.1 h4) h5,
     Œª hr, have h1 : _ := localization.mul_denom R _ r s hs,
       have h2 : localization.of_comm_ring R (powers f) r ‚àà y.val,
         from eq.rec (@@is_ideal.mul_right _ y.2.1.1 hr) h1,
       have h3 : r ‚àà (Zariski.induced (localization.of_comm_ring R (powers f)) x).1,
         from eq.rec h2 hxy.symm,
       have h4 : localization.of_comm_ring R (powers f) r ‚àà x.val,
         from h3,
       have h5 : _ := localization.mul_inv_denom R _ r s hs,
       eq.rec (@@is_ideal.mul_right _ x.2.1.1 h4) h5‚ü©,
  Œª S hs, let ‚ü®F, hsf‚ü© := hs in
    let F' := {r | ‚àÉ (s ‚àà powers f), ‚ü¶(‚ü®r, s, H‚ü© : R √ó powers f)‚üß ‚àà F} in
    ‚ü®F', set.ext $ Œª z,
     ‚ü®Œª hz ‚ü®x, hxs, hnz‚ü©, have h1 : x ‚àà Spec.V F,
        from Œª g, quotient.induction_on g $ Œª ‚ü®r, s, hsg‚ü© hg,
          have h2 : r ‚àà F', from ‚ü®_, hsg, hg‚ü©,
          have h3 : _, from hz h2,
          begin
            rw ‚Üê localization.mul_inv_denom,
            rw ‚Üê hnz at h3,
            exact @@is_ideal.mul_right _ x.2.1.1 h3
          end,
        by rw hsf at h1; exact h1 hxs,
      Œª hz g ‚ü®t, ht, hgtf‚ü©, sorry‚ü©‚ü©‚ü©, --I'm lost
 set.ext $ Œª x,
 ‚ü®Œª ‚ü®y, _, hyx‚ü© hfx, have h1 : localization.of_comm_ring R (powers f) f ‚àà y.val,
    by rwa ‚Üê hyx at hfx,
    @@is_prime_ideal.one_not_mem _ y.1 y.2 $
    begin
      rw ‚Üê @localization.div_self _ _ (powers f) _ f ‚ü®1, by simp‚ü©,
      unfold localization.mk,
      rw ‚Üê localization.mul_inv_denom _ (powers f),
      exact @@is_ideal.mul_right _ y.2.1.1 h1
    end,
  Œª hx, sorry‚ü©‚ü©