/-
Lemma 10.16.6. Let R be a ring. Let f‚ààR. The map R‚ÜíRf induces via the functoriality of Spec a homeomorphism
Spec(Rf)‚ü∂D(f)‚äÇSpec(R).
The inverse is given by ùî≠‚Ü¶ùî≠‚ãÖRf.

Proof. This is a special case of Lemma 10.16.5 (=tag 00E3)
-/

import analysis.topology.topological_space analysis.topology.continuity tag00E2 localization
import Kenny_comm_alg.Zariski
import mathlib_someday.topology 

universes u

/-- tag 00E4 -/
-- note: this should be in mathlib as a structure

lemma lemma_standard_open (R : Type u) [comm_ring R] (f : R) : 
  let œÜ := Zariski.induced $ localization.of_comm_ring R (powers f) in
  topological_space.open_immersion' œÜ ‚àß œÜ '' set.univ = Spec.D'(f) :=
‚ü®‚ü®Zariski.induced.continuous _,
  Œª x y hxy, subtype.eq $ set.ext $ Œª z,
    quotient.induction_on z $ Œª ‚ü®r, s, hs‚ü©,
    ‚ü®Œª hr, have h1 : _ := localization.mul_denom R _ r s hs,
       have h2 : localization.of_comm_ring R (powers f) r ‚àà x.val,
         from eq.rec (@@is_ideal.mul_right _ x.2.1.1 hr) h1,
       have h3 : r ‚àà (Zariski.induced (localization.of_comm_ring R (powers f)) y).1,
         from eq.rec h2 hxy,
       have h4 : localization.of_comm_ring R (powers f) r ‚àà y.val,
         from h3,
       have h5 : _ := localization.mul_inv_denom R _ r s hs,
       eq.rec (@@is_ideal.mul_right _ y.2.1.1 h4) h5,
     Œª hr, have h1 : _ := localization.mul_denom R _ r s hs,
       have h2 : localization.of_comm_ring R (powers f) r ‚àà y.val,
         from eq.rec (@@is_ideal.mul_right _ y.2.1.1 hr) h1,
       have h3 : r ‚àà (Zariski.induced (localization.of_comm_ring R (powers f)) x).1,
         from eq.rec h2 hxy.symm,
       have h4 : localization.of_comm_ring R (powers f) r ‚àà x.val,
         from h3,
       have h5 : _ := localization.mul_inv_denom R _ r s hs,
       eq.rec (@@is_ideal.mul_right _ x.2.1.1 h4) h5‚ü©,
  Œª S hs, let ‚ü®F, hsf‚ü© := hs in
    let F' := {fr | ‚àÉ (r) (s ‚àà powers f), fr = f * r ‚àß ‚ü¶(‚ü®r, s, H‚ü© : R √ó powers f)‚üß ‚àà F} in
    ‚ü®F', set.ext $ Œª z,
     ‚ü®Œª hz ‚ü®x, hxs, hnz‚ü©, have h1 : x ‚àà Spec.V F,
        from Œª g, quotient.induction_on g $ Œª ‚ü®r, s, hsg‚ü© hg,
          have h2 : f * r ‚àà F', from ‚ü®r, s, hsg, rfl, hg‚ü©,
          have h3 : _, from hz h2,
          have h4 : f * s ‚àà powers f, from
            let ‚ü®n, hfns‚ü© := hsg in
            ‚ü®nat.succ n, by rw ‚Üê hfns; refl‚ü©,
          have h5 : ‚ü¶((r, ‚ü®s, hsg‚ü©) : R √ó powers f)‚üß = ‚ü¶(f * r, ‚ü®f * s, h4‚ü©)‚üß,
            from quotient.sound ‚ü®1, is_submonoid.one_mem _, by simp [mul_left_comm, mul_assoc]‚ü©,
          begin
            rw h5,
            rw ‚Üê localization.mul_inv_denom,
            rw ‚Üê hnz at h3,
            exact @@is_ideal.mul_right _ x.2.1.1 h3
          end,
        by rw hsf at h1; exact h1 hxs,
      Œª hz g ‚ü®r, s, hsg, hgfr, hrs‚ü©,
      classical.by_contradiction $ Œª hngz,
        have h1 : f ‚àâ z.1, by intro hn; apply hngz; rw hgfr;
          exact @@is_ideal.mul_right _ z.2.1.1 hn,
        let z' : set (localization.loc R (powers f)) :=
          {f | quotient.lift_on f
             (Œª g, g.1 ‚àà z.1) $ begin
               intros f1 f4 h2,
               rcases f1 with ‚ü®f1, f2, f3‚ü©,
               rcases f4 with ‚ü®f4, f5, f6‚ü©,
               rcases h2 with ‚ü®h2, h3, h4‚ü©,
               simp [-sub_eq_add_neg, sub_mul, sub_eq_zero] at h4 ‚ä¢,
               apply propext,
               show f1 ‚àà z.val ‚Üî f4 ‚àà z.val,
               split,
               { intro h5,
                 have h6 : f5 * f1 * h2 ‚àà z.val,
                 { apply @@is_ideal.mul_right _ z.2.1.1,
                   exact @@is_ideal.mul_left _ z.2.1.1 h5 },
                 rw ‚Üê h4 at h6,
                 cases @@is_prime_ideal.mem_or_mem_of_mul_mem _ z.2 h6 with h7 h7,
                 cases @@is_prime_ideal.mem_or_mem_of_mul_mem _ z.2 h7 with h8 h8,
                 { exfalso,
                   apply h1,
                   cases f3 with f7 f8,
                   apply @@is_prime_ideal.mem_of_pow_mem _ z.2,
                   rw ‚Üê f8 at h8,
                   exact h8 },
                 { exact h8 },
                 { exfalso,
                   apply h1,
                   cases h3 with f7 f8,
                   apply @@is_prime_ideal.mem_of_pow_mem _ z.2,
                   rw ‚Üê f8 at h7,
                   exact h7 } },
               { intro h5,
                 have h6 : f2 * f4 * h2 ‚àà z.val,
                 { apply @@is_ideal.mul_right _ z.2.1.1,
                   exact @@is_ideal.mul_left _ z.2.1.1 h5 },
                 rw h4 at h6,
                 cases @@is_prime_ideal.mem_or_mem_of_mul_mem _ z.2 h6 with h7 h7,
                 cases @@is_prime_ideal.mem_or_mem_of_mul_mem _ z.2 h7 with h8 h8,
                 { exfalso,
                   apply h1,
                   cases f6 with f7 f8,
                   apply @@is_prime_ideal.mem_of_pow_mem _ z.2,
                   rw ‚Üê f8 at h8,
                   exact h8 },
                 { exact h8 },
                 { exfalso,
                   apply h1,
                   cases h3 with f7 f8,
                   apply @@is_prime_ideal.mem_of_pow_mem _ z.2,
                   rw ‚Üê f8 at h7,
                   exact h7 } }
             end} in
        have h2 : is_prime_ideal z', from
        { zero_ := by simp [localization.zero_frac]; exact @@is_ideal.zero _ _ z.2.1.1,
          add_  := Œª f1 f2, quotient.induction_on‚ÇÇ f1 f2 $
            Œª ‚ü®r1, s1, hs1‚ü© ‚ü®r2, s2, hs2‚ü© hg1 hg2,
            by simp [localization.mk_eq, localization.add_frac] at hg1 hg2 ‚ä¢;
            exact @@is_ideal.add _ z.2.1.1
              (@@is_ideal.mul_left _ z.2.1.1 hg2)
              (@@is_ideal.mul_left _ z.2.1.1 hg1),
          smul  := Œª c x, quotient.induction_on‚ÇÇ c x $
            Œª ‚ü®r1, s1, hs1‚ü© ‚ü®r2, s2, hs2‚ü© hg2,
            by simp [localization.mk_eq, localization.mul_frac] at hg2 ‚ä¢;
            exact @@is_ideal.mul_left _ z.2.1.1 hg2,
          ne_univ := Œª h2, h1 $ by rw set.eq_univ_iff_forall at h2;
            exact h2 (localization.of_comm_ring _ _ f),
          mem_or_mem_of_mul_mem := Œª f1 f2, quotient.induction_on‚ÇÇ f1 f2 $
            Œª ‚ü®r1, s1, hs1‚ü© ‚ü®r2, s2, hs2‚ü© hg2,
            by simp [localization.mk_eq, localization.mul_frac] at hg2 ‚ä¢;
            exact @@is_prime_ideal.mem_or_mem_of_mul_mem _ z.2 hg2 },
        have h3 : (‚ü®z', h2‚ü© : X (localization.loc R (powers f))) ‚àâ Spec.V F,
          from Œª h3, hngz $ by rw hgfr; exact @@is_ideal.mul_left _ z.2.1.1 (h3 hrs),
      hz ‚ü®‚ü®z', h2‚ü©, by rw hsf at h3; exact classical.by_contradiction h3,
        begin
          apply subtype.eq,
          apply set.ext,
          intro r1,
          simp [Zariski.induced, localization.of_comm_ring]
        end‚ü©‚ü©‚ü©‚ü©,
 set.ext $ Œª x,
 ‚ü®Œª ‚ü®y, _, hyx‚ü© hfx, have h1 : localization.of_comm_ring R (powers f) f ‚àà y.val,
    by rwa ‚Üê hyx at hfx,
    @@is_prime_ideal.one_not_mem _ y.1 y.2 $
    begin
      rw ‚Üê @localization.div_self _ _ (powers f) _ f ‚ü®1, by simp‚ü©,
      unfold localization.mk,
      rw ‚Üê localization.mul_inv_denom _ (powers f),
      exact @@is_ideal.mul_right _ y.2.1.1 h1
    end,
  Œª hx, let y : set (localization.loc R (powers f)) :=
    {f | quotient.lift_on f
       (Œª g, g.1 ‚àà x.1) $ begin
         intros f1 f4 h2,
         rcases f1 with ‚ü®f1, f2, f3‚ü©,
         rcases f4 with ‚ü®f4, f5, f6‚ü©,
         rcases h2 with ‚ü®h2, h3, h4‚ü©,
         simp [-sub_eq_add_neg, sub_mul, sub_eq_zero] at h4 ‚ä¢,
         apply propext,
         show f1 ‚àà x.val ‚Üî f4 ‚àà x.val,
         split,
         { intro h5,
           have h6 : f5 * f1 * h2 ‚àà x.val,
           { apply @@is_ideal.mul_right _ x.2.1.1,
             exact @@is_ideal.mul_left _ x.2.1.1 h5 },
           rw ‚Üê h4 at h6,
           cases @@is_prime_ideal.mem_or_mem_of_mul_mem _ x.2 h6 with h7 h7,
           cases @@is_prime_ideal.mem_or_mem_of_mul_mem _ x.2 h7 with h8 h8,
           { exfalso,
             apply hx,
             cases f3 with f7 f8,
             apply @@is_prime_ideal.mem_of_pow_mem _ x.2,
             rw ‚Üê f8 at h8,
             exact h8 },
           { exact h8 },
           { exfalso,
             apply hx,
             cases h3 with f7 f8,
             apply @@is_prime_ideal.mem_of_pow_mem _ x.2,
             rw ‚Üê f8 at h7,
             exact h7 } },
         { intro h5,
           have h6 : f2 * f4 * h2 ‚àà x.val,
           { apply @@is_ideal.mul_right _ x.2.1.1,
             exact @@is_ideal.mul_left _ x.2.1.1 h5 },
           rw h4 at h6,
           cases @@is_prime_ideal.mem_or_mem_of_mul_mem _ x.2 h6 with h7 h7,
           cases @@is_prime_ideal.mem_or_mem_of_mul_mem _ x.2 h7 with h8 h8,
           { exfalso,
             apply hx,
             cases f6 with f7 f8,
             apply @@is_prime_ideal.mem_of_pow_mem _ x.2,
             rw ‚Üê f8 at h8,
             exact h8 },
           { exact h8 },
           { exfalso,
             apply hx,
             cases h3 with f7 f8,
             apply @@is_prime_ideal.mem_of_pow_mem _ x.2,
             rw ‚Üê f8 at h7,
             exact h7 } }
       end} in
  have h2 : is_prime_ideal y, from
  { zero_ := by simp [localization.zero_frac]; exact @@is_ideal.zero _ _ x.2.1.1,
    add_  := Œª f1 f2, quotient.induction_on‚ÇÇ f1 f2 $
      Œª ‚ü®r1, s1, hs1‚ü© ‚ü®r2, s2, hs2‚ü© hg1 hg2,
      by simp [localization.mk_eq, localization.add_frac] at hg1 hg2 ‚ä¢;
      exact @@is_ideal.add _ x.2.1.1
        (@@is_ideal.mul_left _ x.2.1.1 hg2)
        (@@is_ideal.mul_left _ x.2.1.1 hg1),
    smul  := Œª c z, quotient.induction_on‚ÇÇ c z $
      Œª ‚ü®r1, s1, hs1‚ü© ‚ü®r2, s2, hs2‚ü© hg2,
      by simp [localization.mk_eq, localization.mul_frac] at hg2 ‚ä¢;
      exact @@is_ideal.mul_left _ x.2.1.1 hg2,
    ne_univ := Œª h2, hx $ by rw set.eq_univ_iff_forall at h2;
      exact h2 (localization.of_comm_ring _ _ f),
    mem_or_mem_of_mul_mem := Œª f1 f2, quotient.induction_on‚ÇÇ f1 f2 $
      Œª ‚ü®r1, s1, hs1‚ü© ‚ü®r2, s2, hs2‚ü© hg2,
      by simp [localization.mk_eq, localization.mul_frac] at hg2 ‚ä¢;
      exact @@is_prime_ideal.mem_or_mem_of_mul_mem _ x.2 hg2 },
 ‚ü®‚ü®y, h2‚ü©, trivial, subtype.eq $ set.ext $ Œª r1, by simp [Zariski.induced, localization.of_comm_ring]‚ü©‚ü©‚ü©